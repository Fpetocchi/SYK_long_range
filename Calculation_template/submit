#!/bin/bash
#$ -S /bin/bash
#$ -N .....                     # job name
#$ -cwd                         # run script in current directory
#$ -pe smp 128                  # MPI cores
#$ -q amd.q


export OMP_NUM_THREADS=1
ulimit -c 0




################################################################################
#                                 USER SETTINGS                                #
################################################################################
#----------------------------------COMPULSORY----------------------------------#
GENMAT=/home/petocchif/1_GW_EDMFT/nobackup/1_production

PATH_INPUT=GWinput_SPEX_.......
PATH_DATA=Results_beta..

START_IT=...
END_IT=...

EXE_SC=SelfConsistency
EXE_QMC=ct_hyb
EXE_AKW=Akw_builder

#-----------------------------------OPTIONAL-----------------------------------#
PATH_INPUT_TR=GWinput_mats
####SKIP_FIRST_SC="T"
####SKIP_ALL_QMC="T"
####CHANGE_BETA_IT=1
####COLLECT_AKW="T"




################################################################################
#                             AUTO-SETUP SETTINGS                              #
################################################################################
LOCAL=$(pwd)
BINqmc=${GENMAT}/Solver/bin
BINsc=${GENMAT}/SelfConsistency/bin

if [ -z ${PATH_INPUT_TR+x} ]; then PATH_INPUT_TR=${PATH_INPUT} ; fi
if [ -z ${SKIP_FIRST_SC+x} ]; then SKIP_FIRST_SC="F"           ; fi
if [ -z ${SKIP_ALL_QMC+x}  ]; then SKIP_ALL_QMC="F"            ; fi
if [ -z ${COLLECT_AKW+x}   ]; then COLLECT_AKW="F"             ; fi

export l0=`grep -n "PATH_INPUT=" input.in    | awk -F  ":" '{print $1}'`
export l1=`grep -n "PATH_INPUT_TR=" input.in | awk -F  ":" '{print $1}'`
export l2=`grep -n "PATH_DATA=" input.in     | awk -F  ":" '{print $1}'`
export l3=`grep -n "START_IT=" input.in      | awk -F  ":" '{print $1}'`
export l4=`grep -n "LAST_IT=" input.in       | awk -F  ":" '{print $1}'`
export l5=`grep -n "MATCH_BETA=" input.in    | awk -F  ":" '{print $1}'`

sed -i ${l0}'s/'"PATH_INPUT=.*!"'/'"PATH_INPUT=${PATH_INPUT}           !"'/' input.in
sed -i ${l1}'s/'"PATH_INPUT_TR=.*!"'/'"PATH_INPUT_TR=${PATH_INPUT_TR}  !"'/' input.in
sed -i ${l2}'s/'"PATH_DATA=.*!"'/'"PATH_DATA=${PATH_DATA}              !"'/' input.in
sed -i ${l4}'s/'"LAST_IT=.*!"'/'"LAST_IT=${END_IT}                     !"'/' input.in




################################################################################
#                             SELF-CONSISTENCY LOOP                            #
################################################################################
for IT in `seq ${START_IT} 1 ${END_IT}`
do

   #
   #
   # Input update
   IT_DATA=${LOCAL}/${PATH_DATA}/${IT}/
   sed -i ${l3}'s/'"START_IT=.*!"'/'"START_IT=${IT}         !"'/' input.in
   sed -i ${l5}'s/'"MATCH_BETA=.*!"'/'"MATCH_BETA=F                                   !"'/' input.in
   if [ ! -z ${CHANGE_BETA_IT+x} ] && [ ${CHANGE_BETA_IT} == ${IT} ] ; then
      sed -i ${l5}'s/'"MATCH_BETA=.*!"'/'"MATCH_BETA=T                                  !"'/' input.in
   fi
   sleep 2

   #
   #
   # Collect spectral functions and break the loop
   if [ "${COLLECT_AKW}" == "T" ] ; then
      ${BINsc}/${EXE_AKW} > report_Akw_it${IT} 2> err_Akw_it${IT}
      mv {report_Akw_it${IT},err_Akw_it${IT}} ${IT_DATA}
      break
   fi
   sleep 2

   #
   #
   # Lattice problem
   if [ ${IT} -eq ${START_IT} ] && [ "${SKIP_FIRST_SC}" == "T" ] ; then
      touch doSolver
   else
      ${BINsc}/${EXE_SC} > report_sc_it${IT} 2> err_sc_it${IT}
      mv {report_sc_it${IT},err_sc_it${IT}} ${IT_DATA}
   fi
   sleep 2

   #
   #
   # Impurity problem
   if [ "${SKIP_ALL_QMC}" == "F" ] ; then
      if [ -f "doSolver" ]; then
         rm doSolver
         mpiexec -np ${NSLOTS} ${BINqmc}/${EXE_QMC} used.input.in ${IT_DATA} > report_qmc_it${IT} 2> err_qmc_it${IT}
         mv {report_qmc_it${IT},err_qmc_it${IT}} ${IT_DATA}
      else
         break
      fi
   else
      if [ -f "doSolver" ]; then
         rm doSolver
         continue
      else
         break
      fi
   fi
   sleep 2

done
