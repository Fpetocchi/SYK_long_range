<?xml version="1.0" encoding="UTF-8"?>
<fortpy mode="docstring">

  <decorates name="symmetry.get_spaceGroup">
    <group name="symmetry_tests" purpose="testing" staging="../unittests/">
      <test identifier="get_spaceGroup_sg_op" description="Tests the get_spaceGroup."
	    timed="true" cases="[1-15]">
	<output identifier="sg_op.out" folder="../tests/symmetry"
		file="get_spaceGroup_sg_op.out.{}" template="" />
	<target name="sg_op" compareto="sg_op.out" varfile="sg_op.out" when="each" />
      </test>
      <test identifier="get_spaceGroup_sg_fract" description="Tests the get_spaceGroup."
	    timed="true" cases="[1-15]">
	<output identifier="sg_fract.out" folder="../tests/symmetry"
		file="get_spaceGroup_sg_fract.out.{}" template="" />
	<target name="sg_fract" compareto="sg_fract.out" varfile="sg_fract.out" when="each" />
      </test>
      <test identifier="get_spaceGroup_input_pos" description="Tests the get_spaceGroup."
	    timed="true" cases="[1-15]">
	<output identifier="input_pos.out" folder="../tests/symmetry"
		file="get_spaceGroup_input_pos.out.{}" template="" />
	<target name="input_pos" compareto="input_pos.out" varfile="input_pos.out" when="each" />
      </test>
      <global name="sg_op" type="real(dp)" modifiers="pointer" dimensions=":,:,:"/>
      <global name="sg_fract" type="real(dp)" modifiers="pointer" dimensions=":,:"/>
      <global name="input_pos" type="real(dp)" modifiers="pointer" dimensions=":,:"/>
      <assignment name="aVecs" value = "vecs" allocate="true">
	<value identifier="vecs" folder="../tests/symmetry"
	       file="get_spaceGroup_aVecs.in.{}" rename="aVecs.in" />
      </assignment>
      <assignment name="atomType" value="aTyp" allocate="true">
	<value identifier="aTyp" folder="../tests/symmetry"
	       file="get_spaceGroup_atomType.in.{}" rename="atomType.in" />
      </assignment>
      <assignment name="input_pos" value="inpos" allocate="true">
	<value identifier="inpos" folder="../tests/symmetry"
	       file="get_spaceGroup_input_pos.in.{}" rename="input_pos.in" />
      </assignment>
      <assignment name="lattcoords" value="lat">
	<value identifier="lat" folder="../tests/symmetry"
	       file="get_spaceGroup_lattcoords.in.{}" rename="lattcoords.in" />
      </assignment>
      <assignment name="eps_" value="eps">
	<value identifier="eps" folder="../tests/symmetry"
	       file="get_spaceGroup_eps.in.{}" rename="eps.in" />
      </assignment>
    </group>
  </decorates>

  <decorates name="symmetry.get_spaceGroup_atomTypes">
    <group name="symmetry_tests" purpose="testing" staging="../unittests/">
      <test identifier="symmetry_aTypes" description="Tests the get_spaceGroup_atomTypes."
	    timed="true" cases="[1-50]">
	<output identifier="aTyp.out" folder="../tests/symmetry"
		file="get_spaceGroup_atomTypes_aTyp.out.{}" template="integer.xml" />
	<target name="aTyp" compareto="aTyp.out" varfile="symaTyp.out" when="each" />
      </test>
      <global name="aTyp" type="integer" modifiers="pointer" dimensions=":"/>
      <assignment name="label" value = "lab" allocate="true">
	<value identifier="lab" folder="../tests/symmetry"
	       file="get_spaceGroup_atomTypes_label.in.{}" rename="label.in" />
      </assignment>
      <assignment name="digit" value="digi" allocate="true">
	<value identifier="digi" folder="../tests/symmetry"
	       file="get_spaceGroup_atomTypes_digit.in.{}" rename="digit.in" />
      </assignment>
      <assignment name="ce" value="seense" allocate="true">
	<value identifier="seense" folder="../tests/symmetry"
	       file="get_spaceGroup_atomTypes_ce.in.{}" rename="ce.in" />
      </assignment>
    </group>
  </decorates>

  <decorates name="symmetry.rm_3d_operations">
    <group name="symmetry_tests" purpose="testing" staging="../unittests/">
      <test identifier="rm_3d_operations_sgrots" description="Tests the rm_3d_operations."
	    timed="true" cases="[1-23]">
	<output identifier="sgrots.out" folder="../tests/symmetry"
		file="rm_3d_operations_sgrots.out.{}" template="" />
	<target name="sgrots" compareto="sgrots.out" varfile="sgrots.out" when="each" />
      </test>
      <test identifier="rm_3d_operations_sgshifts" description="Tests the rm_3d_operations."
	    timed="true" cases="[1-23]">
	<output identifier="sgshifts.out" folder="../tests/symmetry"
		file="rm_3d_operations_sgshifts.out.{}" template="" />
	<target name="sgshifts" compareto="sgshifts.out" varfile="sgshifts.out" when="each" />
      </test>
      <global name="sgrots" type="real(dp)" modifiers="pointer" dimensions=":,:,:"/>
      <global name="sgshifts" type="real(dp)" modifiers="pointer" dimensions=":,:"/>
      <assignment name="sgrots" value = "sgr" allocate="true">
	<value identifier="sgr" folder="../tests/symmetry"
	       file="rm_3d_operations_sgrots.in.{}" rename="sgrots.in" />
      </assignment>
      <assignment name="sgshifts" value="sgs" allocate="true">
	<value identifier="sgs" folder="../tests/symmetry"
	       file="rm_3d_operations_sgshifts.in.{}" rename="sgshifts.in" />
      </assignment>
      <assignment name="aVecs" value="avec" allocate="true">
	<value identifier="avec" folder="../tests/symmetry"
	       file="rm_3d_operations_aVecs.in.{}" rename="aVecs.in" />
      </assignment>
      <assignment name="eps" value="ep">
	<value identifier="ep" folder="../tests/symmetry"
	       file="rm_3d_operations_eps.in.{}" rename="eps.in" />
      </assignment>
    </group>
  </decorates>

  <decorates name="symmetry.make_primitive">
    <group name="symmetry_tests" purpose="testing" staging="../unittests/">
      <test identifier="make_primitive_atom_pos" description="Tests the make_primitive."
	    timed="true" cases="[1-428]">
	<output identifier="atom_pos.out" folder="../tests/symmetry"
		file="make_primitive_atom_pos.out.{}" template="float.xml" />
	<target name="atom_pos" compareto="atom_pos.out" varfile="atom_pos.out" when="each" />
      </test>
      <test identifier="make_primitive_atomType" description="Tests the make_primitive."
	    timed="true" cases="[1-428]">
	<output identifier="atomType.out" folder="../tests/symmetry"
		file="make_primitive_atomType.out.{}" template="integer.xml" />
	<target name="atomType" compareto="atomType.out" varfile="atomType.out" when="each" />
      </test>
      <test identifier="make_primitive_aVecs" description="Tests the make_primitive."
	    timed="true" cases="[1-428]">
	<output identifier="aVecs.out" folder="../tests/symmetry"
		file="make_primitive_aVecs.out.{}" template="float.xml" />
	<target name="aVecs" compareto="aVecs.out" varfile="aVecs.out" when="each" />
      </test>
      <global name="atomType" type="integer" modifiers="pointer" dimensions=":"/>
      <global name="removed_" type="integer" modifiers="pointer" dimensions=":"/>
      <assignment name="aVecs" value = "vec">
	<value identifier="vec" folder="../tests/symmetry"
	       file="make_primitive_aVecs.in.{}" rename="aVecs.in" />
      </assignment>
      <assignment name="atomType" value="atp" allocate="true">
	<value identifier="atp" folder="../tests/symmetry"
	       file="make_primitive_atomType.in.{}" rename="atomType.in" />
      </assignment>
      <assignment name="atom_pos" value="atps" allocate="true">
	<value identifier="atps" folder="../tests/symmetry"
	       file="make_primitive_atom_pos.in.{}" rename="atom_pos.in" />
      </assignment>
      <assignment name="lattCoords" value="ltc">
	<value identifier="ltc" folder="../tests/symmetry"
	       file="make_primitive_lattCoords.in.{}" rename="lattCoords.in" />
      </assignment>
      <assignment name="eps_" value="ep">
	<value identifier="ep" folder="../tests/symmetry"
	       file="make_primitive_eps.in.{}" rename="eps.in" />
      </assignment>
    </group>
  </decorates>

  <decorates name="symmetry.get_lattice_pointGroup">
    <group name="symmetry_tests" purpose="testing" staging="../unittests/">
      <test identifier="get_lattice_pointGroup" description="Tests the get_lattice_pointGroup."
	    timed="true" cases="[1-87]">
	<output identifier="lattpg_op.out" folder="../tests/symmetry"
		file="get_lattice_pointGroup_lattpg_op.out.{}" template="" />
	<target name="lattpg_op" compareto="lattpg_op.out" varfile="lattpg_op.out" when="each" />
      </test>
      <global name="lattpg_op" type="real(dp)" modifiers="pointer" dimensions=":,:,:"/>
      <assignment name="aVecs" value = "vec" allocate="true">
	<value identifier="vec" folder="../tests/symmetry"
	       file="get_lattice_pointGroup_aVecs.in.{}" rename="aVecs.in" />
      </assignment>
      <assignment name="eps_" value="ep">
	<value identifier="ep" folder="../tests/symmetry"
	       file="get_lattice_pointGroup_eps.in.{}" rename="eps.in" />
      </assignment>
    </group>
  </decorates>

  <decorates name="symmetry.get_transformations">
    <group name="symmetry_tests" purpose="testing" staging="../unittests/">
      <test identifier="get_transforms_ctp" description="Tests the get_transformations."
	    timed="true" cases="[1-50]">
	<output identifier="cart_to_prim.out" folder="../tests/symmetry"
		file="get_transformations_cart_to_prim.out.{}" template="float.xml" />
	<target name="cart_to_prim" compareto="cart_to_prim.out" varfile="cart_to_prim.out"
		when="each" />
      </test>
      <test identifier="get_transforms_ptc" description="Tests the get_transformations."
	    timed="true" cases="[1-50]">
	<output identifier="prim_to_cart.out" folder="../tests/symmetry"
		file="get_transformations_prim_to_cart.out.{}" template="float.xml" />
	<target name="prim_to_cart" compareto="prim_to_cart.out" varfile="prim_to_cart.out"
		when="each" />
      </test>
      <assignment name="aVecs" value = "vec" >
	<value identifier="vec" folder="../tests/symmetry"
	       file="get_transformations_aVecs.in.{}" rename="aVecs.in" />
      </assignment>
    </group>
  </decorates>

  <decorates name="symmetry.bring_into_cell">
    <group name="symmetry_tests" purpose="testing" staging="../unittests/">
      <test identifier="bring_into_cell" description="Tests the bring_into_cell."
	    timed="true" cases="[1-50]">
	<output identifier="v.out" folder="../tests/symmetry"
		file="bring_into_cell_v.out.{}" template="float.xml" />
	<target name="v" compareto="v.out" varfile="v.out"
		when="each" />
      </test>
      <assignment name="v" value = "vfile">
	<value identifier="vfile" folder="../tests/symmetry"
	       file="bring_into_cell_v.in.{}" rename="v.in" />
      </assignment>
      <assignment name="cart_to_latt" value = "ctl">
	<value identifier="ctl" folder="../tests/symmetry"
	       file="bring_into_cell_cart_to_latt.in.{}" rename="cart_to_latt.in" />
      </assignment>
      <assignment name="latt_to_cart" value = "ltc">
	<value identifier="ltc" folder="../tests/symmetry"
	       file="bring_into_cell_latt_to_cart.in.{}" rename="latt_to_cart.in" />
      </assignment>
      <assignment name="eps" value = "ep">
	<value identifier="ep" folder="../tests/symmetry"
	       file="bring_into_cell_eps.in.{}" rename="eps.in" />
      </assignment>
    </group>
  </decorates>

  <decorates name="symmetry.does_mapping_exist">
    <group name="symmetry_tests" purpose="testing" staging="../unittests/">
      <test identifier="does_mapping_exist" description="Tests the does_mapping_exist."
	    timed="true" cases="[1-52]">
	<output identifier="mapped.out" folder="../tests/symmetry"
		file="does_mapping_exist_mapped.out.{}" template="string.xml" />
	<target name="mapped" compareto="mapped.out" varfile="mapped.out"
		when="each" />
      </test>
      <assignment name="v" value = "vfile" allocate="true">
	<value identifier="vfile" folder="../tests/symmetry"
	       file="does_mapping_exist_v.in.{}" rename="v.in" />
      </assignment>
      <assignment name="this_type" value = "tt">
	<value identifier="tt" folder="../tests/symmetry"
	       file="does_mapping_exist_this_type.in.{}" rename="this_type.in" />
      </assignment>
      <assignment name="atom_pos" value = "atp" allocate="true">
	<value identifier="atp" folder="../tests/symmetry"
	       file="does_mapping_exist_atom_pos.in.{}" rename="atom_pos.in" />
      </assignment>
      <assignment name="atomType" value = "aty" allocate="true">
	<value identifier="aty" folder="../tests/symmetry"
	       file="does_mapping_exist_atomType.in.{}" rename="atomType.in" />
      </assignment>
      <assignment name="eps" value = "ep">
	<value identifier="ep" folder="../tests/symmetry"
	       file="does_mapping_exist_eps.in.{}" rename="eps.in" />
      </assignment>
    </group>
  </decorates>

  <decorates name="symmetry.check_spaceGroup">
    <skip reason="This routine is not presently used anywhere in the UNCLE code or any
		  other routine." />
    <group name="symmetry_tests" purpose="testing_skip" staging="../unittests/">
      <test identifier="check_spaceGroup" description="Tests the check_spaceGroup."
	    timed="true" cases="[]">
	<output identifier="sym_check.out" folder="../tests/symmetry"
		file="check_spaceGroup_sym_check.out.{}" template="" />
	<target name="./sym_check.out" compareto="sym_check.out" varfile="sym_check.out"
		when="each" />
      </test>
      <global name="SGop" type="real(dp)" modifiers="pointer" dimensions=":,:,:"/>
      <assignment name="SGop" value = "SGopfile" allocate="true">
	<value identifier="SGopfile" folder="../tests/symmetry"
	       file="check_spaceGroup_SGop.in.{}" rename="SGop.in" />
      </assignment>
      <assignment name="eps_" value = "ep">
	<value identifier="ep" folder="../tests/symmetry"
	       file="check_spaceGroup_eps.in.{}" rename="eps.in" />
      </assignment>
    </group>
  </decorates>

  <decorates name="symmetry.find_site_equivalencies">
    <group name="symmetry_tests" purpose="testing" staging="../unittests/">
      <test identifier="find_site_equivalencies_nSites"
	    description="Tests the find_site_equivalencies." timed="true" cases="[1-40]">
	<output identifier="nSites.out" folder="../tests/symmetry"
		file="find_site_equivalencies_nSites.out.{}" template="integer.xml" />
	<target name="nSites" compareto="nSites.out" varfile="nSites.out"
		when="each" />
      </test>
      <test identifier="find_site_equivalencies_BasEq"
	    description="Tests the find_site_equivalencies." timed="true" cases="[1-40]">
	<output identifier="BasEq.out" folder="../tests/symmetry"
		file="find_site_equivalencies_BasEq.out.{}" template="integer.xml" />
	<target name="BasEq" compareto="BasEq.out" varfile="BasEq.out"
		when="each" />
      </test>
      <global name="BasEq" type="integer" modifiers="pointer" dimensions=":"/>
      <global name="pBas" type="real(dp)" modifiers="pointer" dimensions=":,:"/>
      <global name="siteLabel" type="integer" modifiers="pointer" dimensions=":"/>
      <assignment name="pBas" value = "pBasfile" allocate="true">
	<value identifier="pBasfile" folder="../tests/symmetry"
	       file="find_site_equivalencies_pBas.in.{}" rename="pBas.in" />
      </assignment>
      <assignment name="siteLabel" value = "slfile" allocate="true">
	<value identifier="slfile" folder="../tests/symmetry"
	       file="find_site_equivalencies_siteLabel.in.{}" rename="siteLabel.in" />
      </assignment>
      <assignment name="eps_" value = "ep">
	<value identifier="ep" folder="../tests/symmetry"
	       file="find_site_equivalencies_eps.in.{}" rename="eps.in" />
      </assignment>
      <assignment name="pLV" value = "pLVf" allocate="true">
	<value identifier="pLVf" folder="../tests/symmetry"
	       file="find_site_equivalencies_pLV.in.{}" rename="pLV.in" />
      </assignment>
    </group>
  </decorates>
</fortpy>
