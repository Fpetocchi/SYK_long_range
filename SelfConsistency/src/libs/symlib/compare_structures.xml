<?xml version="1.0" encoding="UTF-8"?>
<fortpy mode="docstring">

  <decorates name="compare_structures.compare_arbitrary_structures">
    <group name="compare_structures" purpose="testing"
	   staging="../unittests/">
      <test identifier="compare_arbitrary_structures_identical" cases="[1-999]"
	    description="Test the comparison of arbitrary structures." timed="true" >
	<output identifier="compare_arbitrary_structures_identical"
		folder="../tests/compare_structs"
		file="compare_arbitrary_structures_identical.out.{}" template="string.xml" />
	<target name="identical" compareto="compare_arbitrary_structures_identical"
		varfile="compare_arbitrary_structures_identical.out" when="each" />
      </test>
      <test identifier="compare_arbitrary_structures_mapped" cases="[1-999]"
	    description="Test the comparison of arbitrary structures." timed="true" >
	<output identifier="compare_arbitrary_structures_mapped"
		folder="../tests/compare_structs"
		file="compare_arbitrary_structures_mapped.out.{}" template="string.xml" />
	<target name="mapped" compareto="compare_arbitrary_structures_mapped"
		varfile="compare_arbitrary_structures_mapped.out" when="each" />
      </test>
      <assignment name="LV1in" value="LVfil" allocate="true">
	<value identifier="LVfil" file="compare_arbitrary_structures_LV1in.in.{}"
	       folder="../tests/compare_structs" rename="LV1in.in"/>
      </assignment>
      <assignment name="LV2in" value="LV2fil" allocate="true">
	<value identifier="LV2fil" file="compare_arbitrary_structures_Lv2in.in.{}"
	       folder="../tests/compare_structs" rename="LV2in.in"/>
      </assignment>
      <assignment name="aTyp1in" value="atp1in" allocate="true">
	<value identifier="atp1in" file="compare_arbitrary_structures_aTyp1in.in.{}"
	       folder="../tests/compare_structs" rename="aTyp1in.in"/>
      </assignment>
      <assignment name="aTyp2in" value="atp2in" allocate="true">
	<value identifier="atp2in" file="compare_arbitrary_structures_aTyp2in.in.{}"
	       folder="../tests/compare_structs" rename="aTyp2in.in"/>
      </assignment>
      <assignment name="aPos1in" value="aps1in" allocate="true">
	<value identifier="aps1in" file="compare_arbitrary_structures_aPos1in.in.{}"
	       folder="../tests/compare_structs" rename="aPos1in.in"/>
      </assignment>
      <assignment name="aPos2in" value="aps2in" allocate="true">
	<value identifier="aps2in" file="compare_arbitrary_structures_aPos2in.in.{}"
	       folder="../tests/compare_structs" rename="aPos2in.in"/>
      </assignment>
      <assignment name="aPos2in" value="aps2in" allocate="true">
	<value identifier="aps2in" file="compare_arbitrary_structures_aPos2in.in.{}"
	       folder="../tests/compare_structs" rename="aPos2in.in"/>
      </assignment>
      <assignment name="eps" value="epsf">
	<value identifier="epsf" file="compare_arbitrary_structures_eps.in.{}"
	       folder="../tests/compare_structs" rename="eps.in"/>
      </assignment>
    </group>
  </decorates>

  <decorates name="compare_structures.is_equiv_lattice">
    <group name="compare_structures" purpose="testing" staging="../unittests/">
      <test identifier="is_equiv_lattice"
	    description="Test the comparison of equivalent lattices." timed="true"
	    cases="[1-50]">
	<output identifier="is_equiv_lattice.out" folder="../tests/compare_structs"
		file="is_equiv_lattice.out.{}" template="equal.out.xml" />
	<target name="[default]" compareto="is_equiv_lattice.out" varfile="is_equiv_lattice.out"
		when="each" />
      </test>
      <assignment name="lat1" value="lat1f">
	<value identifier="lat1f" file="is_equiv_lattice_lat1.in.{}"
	       folder="../tests/compare_structs" rename="lat1.in"/>
      </assignment>
      <assignment name="lat2" value="lat2f">
	<value identifier="lat2f" file="is_equiv_lattice_lat2.in.{}"
	       folder="../tests/compare_structs" rename="lat2.in"/>
      </assignment>
      <assignment name="eps" value="epsf">
	<value identifier="epsf" file="is_equiv_lattice_eps.in.{}"
	       folder="../tests/compare_structs" rename="eps.in"/>
      </assignment>
    </group>
  </decorates>

  <decorates name="compare_structures.is_derivative">
    <group name="compare_structures" purpose="testing" staging="../unittests/">
      <test identifier="is_derivative"
	    description="Test the comparison of equivalent lattices." timed="true"
	    cases="[1-50]">
	<output identifier="is_derivative.out" folder="../tests/compare_structs"
		file="is_derivative.out.{}" template="string.xml" />
	<target name="[default]" compareto="is_derivative.out" varfile="is_derivative.out"
		when="each" />
      </test>
      <assignment name="lat1" value="lat1f" allocate="true">
	<value identifier="lat1f" file="is_derivative_lat1.in.{}"
	       folder="../tests/compare_structs" rename="lat1.in"/>
      </assignment>
      <assignment name="lat2" value="lat2f" allocate="true">
	<value identifier="lat2f" file="is_derivative_lat2.in.{}"
	       folder="../tests/compare_structs" rename="lat2.in"/>
      </assignment>
      <assignment name="eps" value="epsf">
	<value identifier="epsf" file="is_derivative_eps.in.{}"
	       folder="../tests/compare_structs" rename="eps.in"/>
      </assignment>
    </group>
  </decorates>

  <decorates name="compare_structures.is_lattice_point">
    <group name="compare_structures" purpose="testing" staging="../unittests/">
      <test identifier="is_lattice_point"
	    description="Test the comparison of equivalent lattices." timed="true"
	    cases="[1-50]">
	<output identifier="is_lattice_point.out" folder="../tests/compare_structs"
		file="is_lattice_point.out.{}" template="string.xml" />
	<target name="[default]" compareto="is_lattice_point.out" varfile="is_lattice_point.out"
		when="each" />
      </test>
      <assignment name="LV" value="LVf" allocate="true">
	<value identifier="LVf" file="is_lattice_point_LV.in.{}"
	       folder="../tests/compare_structs" rename="LV.in"/>
      </assignment>
      <assignment name="pt" value="ptf" allocate="true">
	<value identifier="ptf" file="is_lattice_point_pt.in.{}"
	       folder="../tests/compare_structs" rename="pt.in"/>
      </assignment>
      <assignment name="eps" value="epsf">
	<value identifier="epsf" file="is_lattice_point_eps.in.{}"
	       folder="../tests/compare_structs" rename="eps.in"/>
      </assignment>
    </group>
  </decorates>

  <decorates name="compare_structures.are_lattice_points">
    <group name="compare_structures" purpose="testing"
	   staging="../unittests/">
      <test identifier="are_lattice_points" cases = "[1-213]"
	    description="Test the comparison of equivalent lattices." timed="true" >
	<output identifier="are_lattice_points.out" folder="../tests/compare_structs"
		file="are_lattice_points.out.{}" template="string.xml" />
	<target name="[default]" compareto="are_lattice_points.out"
		varfile="are_lattice_points.out" when="each" />
      </test>
      <assignment name="LV" value="LVf" allocate="true">
	<value identifier="LVf" file="are_lattice_points_LV.in.{}"
	       folder="../tests/compare_structs" rename="LV.in"/>
      </assignment>
      <assignment name="pB" value="pbf" allocate="true">
	<value identifier="pbf" file="are_lattice_points_LV.in.{}"
	       folder="../tests/compare_structs" rename="pB.in"/>
      </assignment>
      <assignment name="pt" value="ptf" allocate="true">
	<value identifier="ptf" file="are_lattice_points_pt.in.{}"
	       folder="../tests/compare_structs" rename="pt"/>
      </assignment>
      <assignment name="eps" value="epsf">
	<value identifier="epsf" file="are_lattice_points_eps.in.{}"
	       folder="../tests/compare_structs" rename="eps.in"/>
      </assignment>
    </group>
  </decorates>

  <decorates name="compare_structures.mapping_translation_exists">
    <group name="compare_structures" purpose="testing"
	   staging="../unittests/">
      <test identifier="mapping_translation_exists" cases="[1-223]"
	    description="Test the comparison of equivalent lattices." timed="true" >
	<output identifier="mapping_translation_exists.out" folder="../tests/compare_structs"
		file="mapping_translation_exists.out.{}" template="string.xml" />
	<target name="[default]" compareto="mapping_translation_exists.out"
		varfile="mapping_translation_exists.out" when="each" />
      </test>
      <assignment name="LV2" value="LV2f" allocate="true">
	<value identifier="LV2f" file="mapping_translation_exists_LV2.in.{}"
	       folder="../tests/compare_structs" rename="LV2.in"/>
      </assignment>
      <assignment name="aTyp1" value="atp1" allocate="true">
	<value identifier="atp1" file="mapping_translation_exists_aTyp1.in.{}"
	       folder="../tests/compare_structs" rename="aTyp1.in"/>
      </assignment>
      <assignment name="aTyp2" value="atp2" allocate="true">
	<value identifier="atp2" file="mapping_translation_exists_aTyp2.in.{}"
	       folder="../tests/compare_structs" rename="aTyp2.in"/>
      </assignment>
      <assignment name="aPos1in" value="aps1" allocate="true">
	<value identifier="aps1" file="mapping_translation_exists_aPos1in.in.{}"
	       folder="../tests/compare_structs" rename="aPos1in.in"/>
      </assignment>
      <assignment name="aPos2" value="aps2" allocate="true">
	<value identifier="aps2" file="mapping_translation_exists_aPos2.in.{}"
	       folder="../tests/compare_structs" rename="aPos2.in"/>
      </assignment>
      <assignment name="eps" value="epsf">
	<value identifier="epsf" file="mapping_translation_exists_eps.in.{}"
	       folder="../tests/compare_structs" rename="eps.in"/>
      </assignment>
    </group>
  </decorates>

  <decorates name="compare_structures.get_basis_permutations">
    <group name="compare_structures" purpose="testing"
	   staging="../unittests/">
      <test identifier="get_basis_permutations" cases="[1-213]"
	    description="Test the comparison of equivalent lattices." timed="true" >
	<output identifier="get_basis_permutations.out" folder="../tests/compare_structs"
		file="get_basis_permutations_perm.out.{}" template="" />
	<target name="perm" compareto="get_basis_permutations.out"
		varfile="get_basis_permutations.out" when="each" />
      </test>
      <global name="perm" type="integer" modifiers="pointer" dimensions=":,:"/>
      <assignment name="uqlist" value="listf" allocate="true">
	<value identifier="listf" file="get_basis_permutations_uqlist.in.{}"
	       folder="../tests/compare_structs" rename="uqlist.in"/>
      </assignment>
    </group>
  </decorates>

  <decorates name="compare_structures.unique">
    <group name="compare_structures" purpose="testing" staging="../unittests/">
      <test identifier="unique_uqlist" cases = "[1-183]"
	    description="Test the comparison of equivalent lattices." timed="true" >
	<output identifier="unique_uqlist.out" folder="../tests/compare_structs"
		file="unique_uqlist.out.{}" template="" />
	<target name="uqlist" compareto="unique_uqlist.out"
		varfile="unique_uqlist.out" when="each" />
      </test>
      <test identifier="unique_block" cases = "[1-183]"
	    description="Test the comparison of equivalent lattices." timed="true" >
	<output identifier="unique_block.out" folder="../tests/compare_structs"
		file="unique_block.out.{}" template="" />
	<target name="block" compareto="unique_block.out"
		varfile="unique_block.out" when="each" />
      </test>
      <global name="uqlist" type="integer" modifiers="pointer" dimensions=":"/>
      <global name="block" type="integer" modifiers="pointer" dimensions=":"/>
      <assignment name="list" value="listf" allocate="true">
	<value identifier="listf" file="unique_list.in.{}"
	       folder="../tests/compare_structs" rename="list.in"/>
      </assignment>
    </group>
  </decorates>
</fortpy>
